Object subclass: #Monom	instanceVariableNames: 'exp coef'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Monom methodsFor: 'initialize-release' stamp: 'SBI 11/14/2019 21:25'!coef^coef! !!Monom methodsFor: 'initialize-release' stamp: 'SBI 11/14/2019 21:22'!coef: anInteger(anInteger isKindOf: Integer)ifTrue: [coef := anInteger]ifFalse: [self error: 'invalid input'.]! !!Monom methodsFor: 'initialize-release' stamp: 'SBI 11/14/2019 21:25'!exp ^exp! !!Monom methodsFor: 'initialize-release' stamp: 'SB 11/17/2019 12:14'!exp: anInteger (anInteger isKindOf: Integer) ifTrue: [ (anInteger >= 0) ifTrue: [ exp := anInteger. ^self]].self error: 'invalid input'! !!Monom methodsFor: 'initialize-release' stamp: 'SBI 11/14/2019 20:50'!initialize	exp := 0.	coef := 0! !!Monom methodsFor: 'initialize-release' stamp: 'LY 11/16/2019 18:45'!printOn: aStream	|name|	name := (self class name , ' coef ', coef printString, ' exp ', exp printString).	aStream nextPutAll: name! !!Monom methodsFor: 'mathematic' stamp: 'SBI 11/14/2019 21:46'!derivative|newExp newCoef newMonom|(exp = 0)ifTrue: [newExp := 0.newCoef := 0	]ifFalse:[newCoef := exp*coef.newExp := exp-1	].newMonom := Monom new.newMonom exp: newExp.newMonom coef: newCoef.^ newMonom! !!Monom methodsFor: 'mathematic' stamp: 'SB 11/17/2019 13:56'!multiplyByMonom: aMonom|newCoef newExp|(aMonom isKindOf: Monom)ifFalse: [self error: 'invalid input'.].newCoef := (self coef * aMonom coef).newExp := (self exp + aMonom exp).self coef: newCoef.self exp: newExp.! !Object subclass: #PolyStream	instanceVariableNames: 'block'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!PolyStream methodsFor: 'initialize-release' stamp: 'LY 11/16/2019 21:39'!add: aPolyStream	| oldBlock dict1 dict2 origPolyStream |	(aPolyStream isKindOf: PolyStream)	ifFalse: [		self error: 'invalid input'.	].		oldBlock := block.	self setBlock: [		origPolyStream := PolyStream new.			dict1 := oldBlock value.				dict1 keysDo: [:x | origPolyStream addCoef: (dict1 at: x) withExp: x].				dict2 := (aPolyStream block) value.		dict2 keysDo: [:x | origPolyStream addCoef: (dict2 at: x) withExp: x].					(origPolyStream block) value.	].! !!PolyStream methodsFor: 'initialize-release' stamp: 'LY 11/16/2019 22:01'!addCoef: coef withExp: exp	| oldBlock oldDict oldCoef |	((coef isKindOf: Integer) and: (exp isKindOf: Integer))	ifFalse: [		self error: 'invalid input'.	].	(exp >= 0)	ifFalse: [		self error: 'invalid input'.	].	oldBlock := block.	self setBlock: [		oldDict := oldBlock value.		(oldDict includesKey: exp)		ifFalse: [			oldDict add: exp->coef		]		ifTrue: [			oldCoef := oldDict at: exp.			oldDict at: exp put: (oldCoef + coef)		].	oldDict.]! !!PolyStream methodsFor: 'initialize-release' stamp: 'LY 11/16/2019 21:28'!block	^block.! !!PolyStream methodsFor: 'initialize-release' stamp: 'LY 11/16/2019 22:13'!eval: anInteger	| result dict |	(anInteger isKindOf: Integer)	ifFalse: [		self error: 'invalid input'.	].		result := 0.	dict := block value.			dict keysDo: [:x | result := result + ((dict at: x) * (anInteger raisedTo: x))].			^result.! !!PolyStream methodsFor: 'initialize-release' stamp: 'LY 11/16/2019 21:12'!initialize	block := [Dictionary new.].! !!PolyStream methodsFor: 'initialize-release' stamp: 'LY 11/16/2019 22:07'!multiplyBy: anInteger	| oldBlock oldDict newDict |	(anInteger isKindOf: Integer)	ifFalse: [		self error: 'invalid input'.	].		oldBlock := block.	self setBlock: [			oldDict := oldBlock value.		newDict := Dictionary new.				oldDict keysDo: [:x | newDict add: x->((oldDict at: x) * anInteger)].				newDict.	].! !!PolyStream methodsFor: 'initialize-release' stamp: 'LY 11/16/2019 21:31'!setBlock: newBlock	"The assignment is by reference - complexity is O(1)"	block := newBlock.! !!PolyStream methodsFor: 'initialize-release' stamp: 'LY 11/16/2019 21:52'!substitute: anInteger	| oldBlock oldDict newDict |	((anInteger isKindOf: Integer) and: (anInteger ~= 0))	ifFalse: [		self error: 'invalid input'.	].		oldBlock := block.	self setBlock: [			oldDict := oldBlock value.		newDict := Dictionary new.				oldDict keysDo: [:x | newDict add: x->((oldDict at: x) * (anInteger raisedTo: x))].				newDict.	].! !Object subclass: #Polynom	instanceVariableNames: 'monoms'	classVariableNames: ''	poolDictionaries: ''	category: 'OOP1'!!Polynom methodsFor: 'converting' stamp: 'SB 11/17/2019 12:23'!asDictionary|dic|dic := Dictionary new.(monoms size > 0)ifTrue:[ monoms do: [:each | dic at: each exp put: each coef] ].^dic! !!Polynom methodsFor: 'mathematic' stamp: 'SB 11/17/2019 12:39'!add: aPolynom|newP|(aPolynom isKindOf: Polynom)ifFalse: [self error: 'invalid input'.].newP := Polynom new.monoms do: [:each | newP addMonom: each].aPolynom monoms do: [:each | newP addMonom: each].^newP! !!Polynom methodsFor: 'mathematic' stamp: 'SB 11/17/2019 12:34'!addMonom: aMonom| oldCoef newMonom|(aMonom isKindOf: Monom)ifFalse: [self error: 'invalid input'.].(aMonom coef = 0)ifTrue: [	^self	].oldCoef:=0.monoms do: [:each | (each exp = aMonom exp) ifTrue: [oldCoef := each coef. monoms remove: each]].newMonom := Monom new.newMonom exp: aMonom exp.newMonom coef: (aMonom coef+oldCoef).(newMonom coef = 0) ifTrue: [^self].monoms add: newMonom! !!Polynom methodsFor: 'mathematic' stamp: 'SB 11/17/2019 13:37'!derivative|newP|newP := Polynom new.monoms do: [:each | |newMonom| newMonom := each derivative. (newMonom coef = 0) ifFalse: [newP addMonom: newMonom]].^newP! !!Polynom methodsFor: 'mathematic' stamp: 'SB 11/15/2019 13:00'!eval: anInteger|polyEval|(anInteger isKindOf: Integer)ifFalse: [self error: 'invalid input'.		].polyEval := 0.monoms do: [:each | |monomEval| monomEval := ((anInteger raisedTo: each exp)*each coef). polyEval := polyEval+monomEval ].^polyEval! !!Polynom methodsFor: 'mathematic' stamp: 'SB 11/17/2019 14:15'!multiplyByMonom: aMonom(aMonom isKindOf: Monom)ifFalse: [self error: 'invalid input'.].(monoms size = 0) ifTrue: [^self].monoms do: [:each | each multiplyByMonom: aMonom. (each coef = 0) ifTrue: [monoms remove: each]]! !!Polynom methodsFor: 'initialize-release' stamp: 'SBI 11/14/2019 22:54'!initialize	monoms := Set new! !!Polynom methodsFor: 'Getters' stamp: 'SB 11/17/2019 12:37'!monoms^monoms! !